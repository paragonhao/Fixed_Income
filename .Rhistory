price <- rep(0, 5)
# 1 year coupon paying at fifth year, 11th column
price[1] = (forward_par_rate[1]/2) * sum(q3_result[11:12,11]) + 100 * q3_result[12,11]
price[2] = (forward_par_rate[2]/2) * sum(q3_result[11:14,11]) + 100 * q3_result[14,11]
price[3] = (forward_par_rate[3]/2) * sum(q3_result[11:16,11]) + 100 * q3_result[16,11]
price[4] = (forward_par_rate[4]/2) * sum(q3_result[11:18,11]) + 100 * q3_result[18,11]
price[5] = (forward_par_rate[5]/2) * sum(q3_result[11:20,11]) + 100 * q3_result[20,11]
payoff[n] = min(price-100)
payoff <- rep(0,10000)
payoff[n] = min(price-100)
min(price-100)
price-100
price-100
dt
min(price)
dt[10,1]
mean(payoff)
q3_result <- matrix(0, nrow=20, ncol=20)
q3_result[, 1] <- dt
payoff <- rep(0,10000)
# simulation for each path
for(n in 1:10000){
# simluate the DTs for a single iteration
for(i in (1:19)){
rCur <- (1/q3_result[i,i] -1)*2
currStepNumber <- (19-i+1)
# sigma for each step
sigmaCurr <- sigma[1:currStepNumber]
# dt for each step
dtCurr <- q3_result[(i+1):20, i]
# dim (currStepNumber X 10000) matrix of rnorms
zmatCurr <- matrix(rnorm(n=1 * currStepNumber) ,nrow=currStepNumber)
# use cholesky decomposition of the correlation matrix to obtain
# the matrix with dim(currStepNumber X 10000)
corcholCur <- corchol[1:currStepNumber, 1:currStepNumber]
# correlated brownian motion is equal to cholesky decomposition the standard norm random variables
dZs <- corcholCur %*% zmatCurr
tempResult <- rowMeans((dtCurr + rCur * dtCurr * deltat) + sigmaCurr * dZs * sqrt(deltat))
tempResult <- c(rep(0, (i-1)),1, tempResult)
q3_result[,(i + 1)] <-  tempResult
}
price <- rep(0, 5)
# 1 year coupon paying at fifth year, 11th column
price[1] = (forward_par_rate[1]/2) * sum(q3_result[11:12,11]) + 100 * q3_result[12,11]
price[2] = (forward_par_rate[2]/2) * sum(q3_result[11:14,11]) + 100 * q3_result[14,11]
price[3] = (forward_par_rate[3]/2) * sum(q3_result[11:16,11]) + 100 * q3_result[16,11]
price[4] = (forward_par_rate[4]/2) * sum(q3_result[11:18,11]) + 100 * q3_result[18,11]
price[5] = (forward_par_rate[5]/2) * sum(q3_result[11:20,11]) + 100 * q3_result[20,11]
payoff[n] = min(price)
}
futuer_price <- mean(payoff)*dt[10,1]
futuer_price
payoff
mean(payoff)
mean(payoff)
mean(payoff)
price
payoff
forward_par_rate[5]/2
q3_result[20,11]
100 * q3_result[20,11]
(forward_par_rate[5]/2) * sum(q3_result[11:20,11]) + 100 * q3_result[20,11]
q3_result
# simulation for each path
for(n in 1:10000){
q3_result <- matrix(0, nrow=20, ncol=20)
q3_result[, 1] <- dt
# simluate the DTs for a single iteration
for(i in (1:19)){
rCur <- (1/q3_result[i,i] -1)*2
currStepNumber <- (19-i+1)
# sigma for each step
sigmaCurr <- sigma[1:currStepNumber]
# dt for each step
dtCurr <- q3_result[(i+1):20, i]
# dim (currStepNumber X 10000) matrix of rnorms
zmatCurr <- matrix(rnorm(n=1 * currStepNumber) ,nrow=currStepNumber)
# use cholesky decomposition of the correlation matrix to obtain
# the matrix with dim(currStepNumber X 10000)
corcholCur <- corchol[1:currStepNumber, 1:currStepNumber]
# correlated brownian motion is equal to cholesky decomposition the standard norm random variables
dZs <- corcholCur %*% zmatCurr
tempResult <- rowMeans((dtCurr + rCur * dtCurr * deltat) + sigmaCurr * dZs * sqrt(deltat))
tempResult <- c(rep(0, (i-1)),1, tempResult)
q3_result[,(i + 1)] <-  tempResult
}
price <- rep(0, 5)
# 1 year coupon paying at fifth year, 11th column
price[1] = (forward_par_rate[1]/2) * sum(q3_result[11:12,11]) + 100 * q3_result[12,11]
price[2] = (forward_par_rate[2]/2) * sum(q3_result[11:14,11]) + 100 * q3_result[14,11]
price[3] = (forward_par_rate[3]/2) * sum(q3_result[11:16,11]) + 100 * q3_result[16,11]
price[4] = (forward_par_rate[4]/2) * sum(q3_result[11:18,11]) + 100 * q3_result[18,11]
price[5] = (forward_par_rate[5]/2) * sum(q3_result[11:20,11]) + 100 * q3_result[20,11]
payoff[n] = min(price)
}
futuer_price <- mean(payoff) * dt[10,1]
futuer_price
futuer_price
payoff <- rep(0,10000)
# simulation for each path
for(n in 1:10000){
q3_result <- matrix(0, nrow=20, ncol=20)
q3_result[, 1] <- dt
# simluate the DTs for a single iteration
for(i in (1:19)){
rCur <- (1/q3_result[i,i] -1)*2
currStepNumber <- (19-i+1)
# sigma for each step
sigmaCurr <- sigma[1:currStepNumber]
# dt for each step
dtCurr <- q3_result[(i+1):20, i]
# dim (currStepNumber X 10000) matrix of rnorms
zmatCurr <- matrix(rnorm(n=1 * currStepNumber) ,nrow=currStepNumber)
# use cholesky decomposition of the correlation matrix to obtain
# the matrix with dim(currStepNumber X 10000)
corcholCur <- corchol[1:currStepNumber, 1:currStepNumber]
# correlated brownian motion is equal to cholesky decomposition the standard norm random variables
dZs <- corcholCur %*% zmatCurr
tempResult <- rowMeans((dtCurr + rCur * dtCurr * deltat) + sigmaCurr * dZs * sqrt(deltat))
tempResult <- c(rep(0, (i-1)),1, tempResult)
q3_result[,(i + 1)] <-  tempResult
}
price <- rep(0, 5)
# 1 year coupon paying at fifth year, 11th column
price[1] = (forward_par_rate[1]/2) * sum(q3_result[11:12,11]) + 100 * q3_result[12,11]
price[2] = (forward_par_rate[2]/2) * sum(q3_result[11:14,11]) + 100 * q3_result[14,11]
price[3] = (forward_par_rate[3]/2) * sum(q3_result[11:16,11]) + 100 * q3_result[16,11]
price[4] = (forward_par_rate[4]/2) * sum(q3_result[11:18,11]) + 100 * q3_result[18,11]
price[5] = (forward_par_rate[5]/2) * sum(q3_result[11:20,11]) + 100 * q3_result[20,11]
payoff[n] = min(price)
}
futuer_price <- mean(payoff) * dt[10,1]
futuer_price
payoff
payoff <- rep(0,10000)
# simulation for each path
for(n in 1:10000){
q3_result <- matrix(0, nrow=20, ncol=20)
q3_result[, 1] <- dt
# simluate the DTs for a single iteration
for(i in (1:19)){
rCur <- (1/q3_result[i,i] -1)*2
currStepNumber <- (19-i+1)
# sigma for each step
sigmaCurr <- sigma[1:currStepNumber]
# dt for each step
dtCurr <- q3_result[(i+1):20, i]
# dim (currStepNumber X 10000) matrix of rnorms
zmatCurr <- matrix(rnorm(n=1 * currStepNumber) ,nrow=currStepNumber)
# use cholesky decomposition of the correlation matrix to obtain
# the matrix with dim(currStepNumber X 10000)
corcholCur <- corchol[1:currStepNumber, 1:currStepNumber]
# correlated brownian motion is equal to cholesky decomposition the standard norm random variables
dZs <- corcholCur %*% zmatCurr
tempResult <- rowMeans((dtCurr + rCur * dtCurr * deltat) + sigmaCurr * dZs * sqrt(deltat))
tempResult <- c(rep(0, (i-1)),1, tempResult)
q3_result[,(i + 1)] <-  tempResult
}
price <- rep(0, 5)
# 1 year coupon paying at fifth year, 11th column
price[1] = (forward_par_rate[1]/2) * sum(q3_result[11:12,11]) + 100 * q3_result[12,11]
price[2] = (forward_par_rate[2]/2) * sum(q3_result[11:14,11]) + 100 * q3_result[14,11]
price[3] = (forward_par_rate[3]/2) * sum(q3_result[11:16,11]) + 100 * q3_result[16,11]
price[4] = (forward_par_rate[4]/2) * sum(q3_result[11:18,11]) + 100 * q3_result[18,11]
price[5] = (forward_par_rate[5]/2) * sum(q3_result[11:20,11]) + 100 * q3_result[20,11]
payoff[n] = min(price)
}
futuer_price <- mean(payoff) * dt[10,1]
payoff
futuer_price <- mean(payoff) * dt[10,1]
futuer_price
mean(payoff)
# simulation for each path
for(n in 1:10000){
q3_result <- matrix(0, nrow=20, ncol=20)
q3_result[, 1] <- dt
# simluate the DTs for a single iteration
for(i in (1:19)){
rCur <- (1/q3_result[i,i] -1)*2
currStepNumber <- (19-i+1)
# sigma for each step
sigmaCurr <- sigma[1:currStepNumber]
# dt for each step
dtCurr <- q3_result[(i+1):20, i]
# dim (currStepNumber X 10000) matrix of rnorms
zmatCurr <- matrix(rnorm(n=1 * currStepNumber) ,nrow=currStepNumber)
# use cholesky decomposition of the correlation matrix to obtain
# the matrix with dim(currStepNumber X 10000)
corcholCur <- corchol[1:currStepNumber, 1:currStepNumber]
# correlated brownian motion is equal to cholesky decomposition the standard norm random variables
dZs <- corcholCur %*% zmatCurr
tempResult <- (dtCurr + rCur * dtCurr * deltat) + sigmaCurr * dZs * sqrt(deltat)
tempResult <- c(rep(0, (i-1)),1, tempResult)
q3_result[,(i + 1)] <-  tempResult
}
price <- rep(0, 5)
# 1 year coupon paying at fifth year, 11th column
price[1] = (forward_par_rate[1]/2) * sum(q3_result[11:12,11]) + 100 * q3_result[12,11]
price[2] = (forward_par_rate[2]/2) * sum(q3_result[11:14,11]) + 100 * q3_result[14,11]
price[3] = (forward_par_rate[3]/2) * sum(q3_result[11:16,11]) + 100 * q3_result[16,11]
price[4] = (forward_par_rate[4]/2) * sum(q3_result[11:18,11]) + 100 * q3_result[18,11]
price[5] = (forward_par_rate[5]/2) * sum(q3_result[11:20,11]) + 100 * q3_result[20,11]
payoff[n] = min(price)
}
futuer_price <- mean(payoff) * dt[10,1]
futuer_price
q3_result
suppressMessages(require(data.table))
suppressMessages(require(kableExtra))
suppressMessages(require(knitr))
rm(list=ls())
# correlation matrix
corrin <- as.data.frame(read.csv("Homework_7_corrin.csv", header = F))
# cholesky decomposition of the correlation matrix
corchol <- as.matrix(read.csv("Homework_7_corchol.csv", header = F))
# D(T)
dt <- as.data.frame(read.csv("Homework_7_pfilea.csv", header = F))
# sigma
sigma <- as.data.frame(read.csv("Homework_7_sigma.csv", header = F))
dt <- as.matrix(dt[1:20,], ncol=1)
sigma <- as.matrix(sigma[1:19,], ncol=1)
result <- matrix(0, nrow=20, ncol=20)
result[,1] <- dt
nSims <- 10000
deltat <- 0.5
for(i in (1:19)){
rCur <- (1/result[i,i] -1)*2
currStepNumber <- (19-i+1)
# sigma for each step
sigmaCurr <- sigma[1:currStepNumber]
# dt for each step
dtCurr <- result[(i+1):20, i]
# dim (currStepNumber X 10000) matrix of rnorms
zmatCurr <- matrix(rnorm(n=nSims * currStepNumber) ,nrow=currStepNumber)
# use cholesky decomposition of the correlation matrix to obtain
# the matrix with dim(currStepNumber X 10000)
corcholCur <- corchol[1:currStepNumber, 1:currStepNumber]
# correlated brownian motion is equal to cholesky decomposition the standard norm random variables
dZs <- corcholCur %*% zmatCurr
tempResult <- rowMeans((dtCurr + rCur * dtCurr * deltat) + sigmaCurr * dZs * sqrt(deltat))
tempResult <- c(rep(0, (i-1)),1, tempResult)
result[,(i + 1)] <-  tempResult
}
result <- cbind(result , c(rep(0,19),1))
colnames(result) <- seq(0, 10,0.5)
rownames(result) <- seq(0.5,10,0.5)
kable(result, "latex", booktabs =T, caption = "String Model Forward rates", align ="l") %>% kable_styling(latex_options = c("striped", "scale_down"))
period <- c(1,2,3,4,5) * 2
inital_dt <- dt[10]
# the forward par rate based on the initial term structure
# at t =0, the price is 100
forward_par_rate <- sapply(period, function(x){
2 * 100 * (inital_dt - dt[10 + x])/sum(dt[(10 + 1):(10+x)])
})
forward_par_rate
payoff <- rep(0,10000)
# simulation for each path
for(n in 1:10000){
q3_result <- matrix(0, nrow=20, ncol=20)
q3_result[, 1] <- dt
# simluate the DTs for a single iteration
for(i in (1:19)){
rCur <- (1/q3_result[i,i] -1)*2
currStepNumber <- (19-i+1)
# sigma for each step
sigmaCurr <- sigma[1:currStepNumber]
# dt for each step
dtCurr <- q3_result[(i+1):20, i]
# dim (currStepNumber X 10000) matrix of rnorms
zmatCurr <- matrix(rnorm(n=1 * currStepNumber) ,nrow=currStepNumber)
# use cholesky decomposition of the correlation matrix to obtain
# the matrix with dim(currStepNumber X 10000)
corcholCur <- corchol[1:currStepNumber, 1:currStepNumber]
# correlated brownian motion is equal to cholesky decomposition the standard norm random variables
dZs <- corcholCur %*% zmatCurr
tempResult <- (dtCurr + rCur * dtCurr * deltat) + sigmaCurr * dZs * sqrt(deltat)
tempResult <- c(rep(0, (i-1)),1, tempResult)
q3_result[,(i + 1)] <-  tempResult
}
price <- rep(0, 5)
# 1 year coupon paying at fifth year, 11th column
price[1] = (forward_par_rate[1]/2) * sum(q3_result[11:12,11]) + 100 * q3_result[12,11]
price[2] = (forward_par_rate[2]/2) * sum(q3_result[11:14,11]) + 100 * q3_result[14,11]
price[3] = (forward_par_rate[3]/2) * sum(q3_result[11:16,11]) + 100 * q3_result[16,11]
price[4] = (forward_par_rate[4]/2) * sum(q3_result[11:18,11]) + 100 * q3_result[18,11]
price[5] = (forward_par_rate[5]/2) * sum(q3_result[11:20,11]) + 100 * q3_result[20,11]
payoff[n] = min(price)
}
futuer_price <- mean(payoff) * dt[10,1]
futuer_price
tempResult
q3_result
futuer_price
Dt3 <- matrix(ncol = 11,nrow = 20)
Dt3[,1] <- dt[1:20]
Dt3[cbind(1:20,2:11)] = 1
value = numeric(10000)
for(i in 1:10000){
for(t in 2:11){
r=2*(1/Dt3[t-1,t-1]-1)
normal = matrix(rnorm(20),ncol=1)
corr = corchol%*%normal
Dt3[t:20,t] = Dt3[t:20,t-1]+r*Dt3[t:20,t-1]/2+sigma[1:(21-t)]*Dt3[t:20,t-1]*sqrt(0.5)*corr[t:20]
}
pay_off <- numeric(5)
pay_off[1] = forward_par_rate[1]/2*sum(Dt3[11:12,11])+100*Dt3[12,11]
pay_off[2] = forward_par_rate[2]/2*sum(Dt3[11:14,11])+100*Dt3[14,11]
pay_off[3] = forward_par_rate[3]/2*sum(Dt3[11:16,11])+100*Dt3[16,11]
pay_off[4] = forward_par_rate[4]/2*sum(Dt3[11:18,11])+100*Dt3[18,11]
pay_off[5] = forward_par_rate[5]/2*sum(Dt3[11:20,11])+100*Dt3[20,11]
value[i] = min(pay_off-100)
}
price = -mean(value)*Dt3[10,1]
price
Dt3 <- matrix(ncol = 11,nrow = 20)
Dt3[,1] <- dt[1:20]
Dt3[cbind(1:20,2:11)] = 1
value = numeric(10000)
for(i in 1:10000){
for(t in 2:11){
r=2*(1/Dt3[t-1,t-1]-1)
normal = matrix(rnorm(20),ncol=1)
corr = corchol%*%normal
Dt3[t:20,t] = Dt3[t:20,t-1]+r*Dt3[t:20,t-1]/2+sigma[1:(21-t)]*Dt3[t:20,t-1]*sqrt(0.5)*corr[t:20]
}
pay_off <- numeric(5)
pay_off[1] = forward_par_rate[1]/2*sum(Dt3[11:12,11])+100*Dt3[12,11]
pay_off[2] = forward_par_rate[2]/2*sum(Dt3[11:14,11])+100*Dt3[14,11]
pay_off[3] = forward_par_rate[3]/2*sum(Dt3[11:16,11])+100*Dt3[16,11]
pay_off[4] = forward_par_rate[4]/2*sum(Dt3[11:18,11])+100*Dt3[18,11]
pay_off[5] = forward_par_rate[5]/2*sum(Dt3[11:20,11])+100*Dt3[20,11]
value[i] = min(pay_off)
}
price = -mean(value)*Dt3[10,1]
price
q2_result <- as.matrix(forward_par_rate)
q2_result
colnames(q2_result) <- "Forward Rate"
q2_result
rownames(q2_result)
rownames(q2_result) <- paste0("Year-",1:5)
q2_result
payoff <- rep(0,10000)
# simulation for each path
for(n in 1:10000){
q3_result <- matrix(0, nrow=20, ncol=20)
q3_result[, 1] <- dt
# simluate the DTs for a single iteration
for(i in (1:19)){
rCur <- (1/q3_result[i,i] -1)*2
currStepNumber <- (19-i+1)
# sigma for each step
sigmaCurr <- sigma[1:currStepNumber]
# dt for each step
dtCurr <- q3_result[(i+1):20, i]
# dim (currStepNumber X 10000) matrix of rnorms
zmatCurr <- matrix(rnorm(n=1 * currStepNumber) ,nrow=currStepNumber)
# use cholesky decomposition of the correlation matrix to obtain
# the matrix with dim(currStepNumber X 10000)
corcholCur <- corchol[1:currStepNumber, 1:currStepNumber]
# correlated brownian motion is equal to cholesky decomposition the standard norm random variables
dZs <- corcholCur %*% zmatCurr
tempResult <- (dtCurr + rCur * dtCurr * deltat) + sigmaCurr * dZs * sqrt(deltat)
tempResult <- c(rep(0, (i-1)),1, tempResult)
q3_result[,(i + 1)] <-  tempResult
}
price <- rep(0, 5)
# 1 year coupon paying at fifth year, 11th column
price[1] <- (forward_par_rate[1]/2) * sum(q3_result[11:12,11]) + 100 * q3_result[12,11]
price[2] <- (forward_par_rate[2]/2) * sum(q3_result[11:14,11]) + 100 * q3_result[14,11]
price[3] <- (forward_par_rate[3]/2) * sum(q3_result[11:16,11]) + 100 * q3_result[16,11]
price[4] <- (forward_par_rate[4]/2) * sum(q3_result[11:18,11]) + 100 * q3_result[18,11]
price[5] <- (forward_par_rate[5]/2) * sum(q3_result[11:20,11]) + 100 * q3_result[20,11]
payoff[n] <- min(price)
}
futuer_price <- mean(payoff) * q3_result[10,1]
cat("The future price is : ", futuer_price,"\n")
dt[10,1]
mean(payoff)
mean(payoff) * dt[10,1]
suppressMessages(require(data.table))
suppressMessages(require(lfe))
suppressMessages(require(foreign))
suppressMessages(require(stargazer))
rm(list=ls())
options(max.print=100)
# clean up and reshape the data
world_bank_raw_data <-as.data.table(read.csv("world_bank_data.csv", header = T, sep = ","))
world_bank_raw_data <- world_bank_raw_data[ 1:5425,]
factorNames <- unique(world_bank_raw_data[, .(Series.Name, Series.Code )])
world_bank_raw_data[, Series.Name := NULL]
world_bank_raw_data[, Country.Name := NULL]
# Y : GDP growth (annual %) NY.GDP.MKTP.KD.ZG
# factors:
# 1. population growth SP.POP.GROW
# 2. Energy use (kg of oil equivalent per capita) EG.USE.PCAP.KG.OE, consider taking out as not a lot of data
# 3. Inflation, consumer prices (annual %) FP.CPI.TOTL.ZG
# 4. Exports of goods and services (% of GDP) NE.EXP.GNFS.ZS
# 5. Imports of goods and services (% of GDP)  NE.IMP.GNFS.ZS
# 6. High-technology exports (% of manufactured exports) TX.VAL.TECH.MF.ZS, consider taking out as not a lot of data
# 7. Foreign direct investment, net inflows (% of GDP) BN.KLT.DINV.CD
# 8. Gross capital formation (% of GDP)  NE.GDI.TOTL.ZS
colnames(world_bank_raw_data) <- c("Factor_name", "Country_code", 1960:2018)
reshaped_wb_data <- melt(world_bank_raw_data, id.vars = c("Country_code", "Factor_name"),
variable.name = "year",
value.name = "Factor_value")
reshaped_wb_data[Factor_value=="..", Factor_value := NA]
factorsInModel <- c("NY.GDP.MKTP.KD.ZG", "SP.POP.GROW",
"FP.CPI.TOTL.ZG", "NE.EXP.GNFS.ZS", "NE.IMP.GNFS.ZS", "BN.KLT.DINV.CD","NE.GDI.TOTL.ZS")
reshaped_wb_data <- reshaped_wb_data[Factor_name %in% factorsInModel,]
# reshape factors to columns
final_data <- dcast(reshaped_wb_data, Country_code +  year ~ Factor_name , value.var="Factor_value")
# sort the data
setorder(final_data, Country_code, year)
# lagg all the t-1 variable to match with GDP at t
for(i in factorsInModel){
final_data[, `:=`(paste0(i,"_lagged"), shift(get(i))), by=c("Country_code")]
}
# make sure observation is actually next year
final_data[, year := as.numeric(as.character(year))]
final_data <- final_data[year!= 2018]
final_data[, `:=`(next_year, shift(year, type="lead")), by=c("Country_code")]
final_data[next_year != (year + 1), `:=`(NY.GDP.MKTP.KD.ZG, NA)]
factorsInModel_lagged <- paste0(factorsInModel,"_lagged")
# lagg all the t-1 variable to match with GDP at t
for(i in factorsInModel_lagged){
final_data <- final_data[!is.na(get(i))]
}
suppressMessages(require(data.table))
suppressMessages(require(kableExtra))
suppressMessages(require(knitr))
rm(list=ls())
# correlation matrix
corrin <- as.data.frame(read.csv("Homework_7_corrin.csv", header = F))
# cholesky decomposition of the correlation matrix
corchol <- as.matrix(read.csv("Homework_7_corchol.csv", header = F))
# D(T)
dt <- as.data.frame(read.csv("Homework_7_pfilea.csv", header = F))
# sigma
sigma <- as.data.frame(read.csv("Homework_7_sigma.csv", header = F))
dt <- as.matrix(dt[1:20,], ncol=1)
sigma <- as.matrix(sigma[1:19,], ncol=1)
result <- matrix(0, nrow=20, ncol=20)
result[,1] <- dt
nSims <- 10000
deltat <- 0.5
for(i in (1:19)){
rCur <- (1/result[i,i] -1)*2
currStepNumber <- (19-i+1)
# sigma for each step
sigmaCurr <- sigma[1:currStepNumber]
# dt for each step
dtCurr <- result[(i+1):20, i]
# dim (currStepNumber X 10000) matrix of rnorms
zmatCurr <- matrix(rnorm(n=nSims * currStepNumber) ,nrow=currStepNumber)
# use cholesky decomposition of the correlation matrix to obtain
# the matrix with dim(currStepNumber X 10000)
corcholCur <- corchol[1:currStepNumber, 1:currStepNumber]
# correlated brownian motion is equal to cholesky decomposition the standard norm random variables
dZs <- corcholCur %*% zmatCurr
tempResult <- rowMeans((dtCurr + rCur * dtCurr * deltat) + sigmaCurr * dZs * sqrt(deltat))
tempResult <- c(rep(0, (i-1)),1, tempResult)
result[,(i + 1)] <-  tempResult
}
result <- cbind(result , c(rep(0,19),1))
colnames(result) <- seq(0, 10,0.5)
rownames(result) <- seq(0.5,10,0.5)
kable(result, "latex", booktabs =T, caption = "String Model Forward rates", align ="l") %>% kable_styling(latex_options = c("striped", "scale_down"))
kable(result, "latex", booktabs =T, caption = "String Model Forward rates", align ="l") %>% kable_styling(latex_options = c("striped", "scale_down"))
result
tempResult
c(rep(0, (i-1)), 1, tempResult)
c(rep(0, (i-1)), 1, tempResult)
tempResult
1/0.94^2 - 1
(1/0.94^2 - 1) * 2
1/(0.94^2)
(1/(0.94^2 - 1) * 2
(1/(0.94^2) - 1) * 2
(1/(0.94^-2) - 1) * 2
1/0.94
(1/0.94) ^ 2 - 1
(1/0.94)
(1/0.94^2)
(1/0.94^2)- 1
0.94 ^ (-0.5)
0.94 ^ (-0.5) - 1
100 /96.15
100 /96.15-1
1 + 0.05/2
1/(1 + 0.05/2)
1/(1 + 0.1/2)
1 + 1/y + (100 * (N-1) - 1/y * (100 + c*N)) * (100 /100)
y <- 0.1
N <- 10
c<- 5
1 + 1/y + (100 * (N-1) - 1/y * (100 + c*N)) * (100 /100)
1 + 1/y + (100 * (N-1) - 1/y * (100 + c*N))
1/(1 + 0.05/4)
1/(1 + 0.06/4)
1/(1 + 0.06/4)^3
102.75 * 0.988
102.75 * 0.9876543
sqrt(1.06) - 1
(sqrt(1.06) - 1) * 2
exp(-0.06)
sqrt(exp(-0.06))
1/sqrt(exp(-0.06))
2 * (1/sqrt(exp(-0.06)) - 1)
exp(-0.06)
4 + 87 * qnorm(0.01)
qnorm(0.01)
